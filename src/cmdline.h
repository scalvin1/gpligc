/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "OGIE"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "OGIE"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int verbose_flag;	/**< @brief verbosity? (default=off).  */
  const char *verbose_help; /**< @brief verbosity? help description.  */
  int quiet_flag;	/**< @brief Quiet (default=off).  */
  const char *quiet_help; /**< @brief Quiet help description.  */
  int query_gl_flag;	/**< @brief Querying openGL implementation (default=off).  */
  const char *query_gl_help; /**< @brief Querying openGL implementation help description.  */
  int check_flag;	/**< @brief return exitcode 0 (default=off).  */
  const char *check_help; /**< @brief return exitcode 0 help description.  */
  int compiler_flag;	/**< @brief info about build (default=off).  */
  const char *compiler_help; /**< @brief info about build help description.  */
  int debug_flag;	/**< @brief lots of output (default=off).  */
  const char *debug_help; /**< @brief lots of output help description.  */
  char * igc_file_arg;	/**< @brief igc-file.  */
  char * igc_file_orig;	/**< @brief igc-file original value given at command line.  */
  const char *igc_file_help; /**< @brief igc-file help description.  */
  int gpsd_flag;	/**< @brief live gps via gpsd (default=off).  */
  const char *gpsd_help; /**< @brief live gps via gpsd help description.  */
  char * gpsd_server_arg;	/**< @brief address of gpsd server.  */
  char * gpsd_server_orig;	/**< @brief address of gpsd server original value given at command line.  */
  const char *gpsd_server_help; /**< @brief address of gpsd server help description.  */
  int gpsd_port_arg;	/**< @brief port of gpsd server.  */
  char * gpsd_port_orig;	/**< @brief port of gpsd server original value given at command line.  */
  const char *gpsd_port_help; /**< @brief port of gpsd server help description.  */
  int gpsalt_flag;	/**< @brief use gps altitude (default=off).  */
  const char *gpsalt_help; /**< @brief use gps altitude help description.  */
  int baroalt_flag;	/**< @brief use barometric alt (default=off).  */
  const char *baroalt_help; /**< @brief use barometric alt help description.  */
  int use_all_fixes_flag;	/**< @brief Use all position fixes (default=off).  */
  const char *use_all_fixes_help; /**< @brief Use all position fixes help description.  */
  float lat_arg;	/**< @brief Latitude.  */
  char * lat_orig;	/**< @brief Latitude original value given at command line.  */
  const char *lat_help; /**< @brief Latitude help description.  */
  float lon_arg;	/**< @brief Longitude.  */
  char * lon_orig;	/**< @brief Longitude original value given at command line.  */
  const char *lon_help; /**< @brief Longitude help description.  */
  int get_elevation_flag;	/**< @brief Return elevation of lat/lon (default=off).  */
  const char *get_elevation_help; /**< @brief Return elevation of lat/lon help description.  */
  char * config_file_arg;	/**< @brief config file.  */
  char * config_file_orig;	/**< @brief config file original value given at command line.  */
  const char *config_file_help; /**< @brief config file help description.  */
  int ortho_flag;	/**< @brief 2D Orthographic View (default=off).  */
  const char *ortho_help; /**< @brief 2D Orthographic View help description.  */
  int perspective_flag;	/**< @brief 3D View (default=off).  */
  const char *perspective_help; /**< @brief 3D View help description.  */
  int aov_arg;	/**< @brief angle of view.  */
  char * aov_orig;	/**< @brief angle of view original value given at command line.  */
  const char *aov_help; /**< @brief angle of view help description.  */
  int landscape_flag;	/**< @brief landscape from dem (default=off).  */
  const char *landscape_help; /**< @brief landscape from dem help description.  */
  int flat_flag;	/**< @brief flat underground (default=off).  */
  const char *flat_help; /**< @brief flat underground help description.  */
  int map_flag;	/**< @brief display digitized maps (default=off).  */
  const char *map_help; /**< @brief display digitized maps help description.  */
  int no_map_flag;	/**< @brief dont use maps (default=off).  */
  const char *no_map_help; /**< @brief dont use maps help description.  */
  char * map_set_name_arg;	/**< @brief name of map set to use.  */
  char * map_set_name_orig;	/**< @brief name of map set to use original value given at command line.  */
  const char *map_set_name_help; /**< @brief name of map set to use help description.  */
  int modulate_flag;	/**< @brief dem color and maps (default=off).  */
  const char *modulate_help; /**< @brief dem color and maps help description.  */
  int no_modulate_flag;	/**< @brief no color modulation (default=off).  */
  const char *no_modulate_help; /**< @brief no color modulation help description.  */
  int maps_unlighted_flag;	/**< @brief dont use lighting for unmodulated maps (default=off).  */
  const char *maps_unlighted_help; /**< @brief dont use lighting for unmodulated maps help description.  */
  int maps_lighted_flag;	/**< @brief use lighting for unmodulated maps (default=off).  */
  const char *maps_lighted_help; /**< @brief use lighting for unmodulated maps help description.  */
  int no_lighting_flag;	/**< @brief Dont use lighting for terrain (default=off).  */
  const char *no_lighting_help; /**< @brief Dont use lighting for terrain help description.  */
  int terrain_shading_flag;	/**< @brief Use terrain shading (implies no-lighting) (default=off).  */
  const char *terrain_shading_help; /**< @brief Use terrain shading (implies no-lighting) help description.  */
  float shading_scale_arg;	/**< @brief shading-scale (1-10000).  */
  char * shading_scale_orig;	/**< @brief shading-scale (1-10000) original value given at command line.  */
  const char *shading_scale_help; /**< @brief shading-scale (1-10000) help description.  */
  int light_direction_arg;	/**< @brief direction for light (1-8).  */
  char * light_direction_orig;	/**< @brief direction for light (1-8) original value given at command line.  */
  const char *light_direction_help; /**< @brief direction for light (1-8) help description.  */
  int airspace_flag;	/**< @brief Airspace visualization (default=off).  */
  const char *airspace_help; /**< @brief Airspace visualization help description.  */
  int airspace_wire_flag;	/**< @brief Airspace as wireframe (default=off).  */
  const char *airspace_wire_help; /**< @brief Airspace as wireframe help description.  */
  float airspace_wire_col_r_arg;	/**< @brief wire color red.  */
  char * airspace_wire_col_r_orig;	/**< @brief wire color red original value given at command line.  */
  const char *airspace_wire_col_r_help; /**< @brief wire color red help description.  */
  float airspace_wire_col_g_arg;	/**< @brief wire color green.  */
  char * airspace_wire_col_g_orig;	/**< @brief wire color green original value given at command line.  */
  const char *airspace_wire_col_g_help; /**< @brief wire color green help description.  */
  float airspace_wire_col_b_arg;	/**< @brief wire color blue.  */
  char * airspace_wire_col_b_orig;	/**< @brief wire color blue original value given at command line.  */
  const char *airspace_wire_col_b_help; /**< @brief wire color blue help description.  */
  float airspace_wire_width_arg;	/**< @brief linewidth wires.  */
  char * airspace_wire_width_orig;	/**< @brief linewidth wires original value given at command line.  */
  const char *airspace_wire_width_help; /**< @brief linewidth wires help description.  */
  int airspace_transparent_flag;	/**< @brief Airspace transparent (default=off).  */
  const char *airspace_transparent_help; /**< @brief Airspace transparent help description.  */
  int no_airspace_flag;	/**< @brief no Airspaces (default=off).  */
  const char *no_airspace_help; /**< @brief no Airspaces help description.  */
  char * airspace_file_arg;	/**< @brief use airspaces from file.  */
  char * airspace_file_orig;	/**< @brief use airspaces from file original value given at command line.  */
  const char *airspace_file_help; /**< @brief use airspaces from file help description.  */
  int airspace_limit_arg;	/**< @brief limit (FL) for airspaces.  */
  char * airspace_limit_orig;	/**< @brief limit (FL) for airspaces original value given at command line.  */
  const char *airspace_limit_help; /**< @brief limit (FL) for airspaces help description.  */
  int wire_flag;	/**< @brief wireframe landscape (default=off).  */
  const char *wire_help; /**< @brief wireframe landscape help description.  */
  int filled_flag;	/**< @brief filled polygons (default=off).  */
  const char *filled_help; /**< @brief filled polygons help description.  */
  int grayscale_flag;	/**< @brief grayscaled image (default=off).  */
  const char *grayscale_help; /**< @brief grayscaled image help description.  */
  int color_flag;	/**< @brief color image (default=off).  */
  const char *color_help; /**< @brief color image help description.  */
  int stereo_flag;	/**< @brief stereoscopic (default=off).  */
  const char *stereo_help; /**< @brief stereoscopic help description.  */
  int no_stereo_flag;	/**< @brief no stereoscopic view (default=off).  */
  const char *no_stereo_help; /**< @brief no stereoscopic view help description.  */
  int stereo_rg_flag;	/**< @brief stereoscopic red/green (default=off).  */
  const char *stereo_rg_help; /**< @brief stereoscopic red/green help description.  */
  int no_stereo_rg_flag;	/**< @brief no stereoscopic red/green (default=off).  */
  const char *no_stereo_rg_help; /**< @brief no stereoscopic red/green help description.  */
  int stereo_rb_flag;	/**< @brief stereoscopic red/blue (default=off).  */
  const char *stereo_rb_help; /**< @brief stereoscopic red/blue help description.  */
  int no_stereo_rb_flag;	/**< @brief no stereoscopic red/blue (default=off).  */
  const char *no_stereo_rb_help; /**< @brief no stereoscopic red/blue help description.  */
  int stereo_hw_flag;	/**< @brief stereoscopic hardware (default=off).  */
  const char *stereo_hw_help; /**< @brief stereoscopic hardware help description.  */
  int no_stereo_hw_flag;	/**< @brief no stereoscopic hardware (default=off).  */
  const char *no_stereo_hw_help; /**< @brief no stereoscopic hardware help description.  */
  int inverse_stereo_flag;	/**< @brief invert right/left image (default=off).  */
  const char *inverse_stereo_help; /**< @brief invert right/left image help description.  */
  int no_inverse_stereo_flag;	/**< @brief dont invert right/left (default=off).  */
  const char *no_inverse_stereo_help; /**< @brief dont invert right/left help description.  */
  float eye_dist_arg;	/**< @brief eye distance for stereoscopic view (km).  */
  char * eye_dist_orig;	/**< @brief eye distance for stereoscopic view (km) original value given at command line.  */
  const char *eye_dist_help; /**< @brief eye distance for stereoscopic view (km) help description.  */
  int flat_shading_flag;	/**< @brief no gouraud (default=off).  */
  const char *flat_shading_help; /**< @brief no gouraud help description.  */
  int gouraud_shading_flag;	/**< @brief use gouraud-shading (default=off).  */
  const char *gouraud_shading_help; /**< @brief use gouraud-shading help description.  */
  int quads_flag;	/**< @brief use quadrilaterals (default=off).  */
  const char *quads_help; /**< @brief use quadrilaterals help description.  */
  int curtain_flag;	/**< @brief draw curtain (default=off).  */
  const char *curtain_help; /**< @brief draw curtain help description.  */
  int no_curtain_flag;	/**< @brief draw no curtain (default=off).  */
  const char *no_curtain_help; /**< @brief draw no curtain help description.  */
  int haze_flag;	/**< @brief draw haze (default=off).  */
  const char *haze_help; /**< @brief draw haze help description.  */
  int no_haze_flag;	/**< @brief draw no haze (default=off).  */
  const char *no_haze_help; /**< @brief draw no haze help description.  */
  float haze_density_arg;	/**< @brief haze density (0-0.5).  */
  char * haze_density_orig;	/**< @brief haze density (0-0.5) original value given at command line.  */
  const char *haze_density_help; /**< @brief haze density (0-0.5) help description.  */
  int colormap_arg;	/**< @brief no. of colormap to use.  */
  char * colormap_orig;	/**< @brief no. of colormap to use original value given at command line.  */
  const char *colormap_help; /**< @brief no. of colormap to use help description.  */
  int colormap_sea_arg;	/**< @brief colormap 2 (sea).  */
  char * colormap_sea_orig;	/**< @brief colormap 2 (sea) original value given at command line.  */
  const char *colormap_sea_help; /**< @brief colormap 2 (sea) help description.  */
  int colormap_min_arg;	/**< @brief mininum height.  */
  char * colormap_min_orig;	/**< @brief mininum height original value given at command line.  */
  const char *colormap_min_help; /**< @brief mininum height help description.  */
  int colormap_max_arg;	/**< @brief maximum height.  */
  char * colormap_max_orig;	/**< @brief maximum height original value given at command line.  */
  const char *colormap_max_help; /**< @brief maximum height help description.  */
  int sealevel_arg;	/**< @brief set sealevel.  */
  char * sealevel_orig;	/**< @brief set sealevel original value given at command line.  */
  const char *sealevel_help; /**< @brief set sealevel help description.  */
  int sealevel2_arg;	/**< @brief set sealevel2.  */
  char * sealevel2_orig;	/**< @brief set sealevel2 original value given at command line.  */
  const char *sealevel2_help; /**< @brief set sealevel2 help description.  */
  int sealevel3_arg;	/**< @brief set sealevel3.  */
  char * sealevel3_orig;	/**< @brief set sealevel3 original value given at command line.  */
  const char *sealevel3_help; /**< @brief set sealevel3 help description.  */
  int ignore_elev_min_arg;	/**< @brief ignore range min.  */
  char * ignore_elev_min_orig;	/**< @brief ignore range min original value given at command line.  */
  const char *ignore_elev_min_help; /**< @brief ignore range min help description.  */
  int ignore_elev_max_arg;	/**< @brief ignore range max.  */
  char * ignore_elev_max_orig;	/**< @brief ignore range max original value given at command line.  */
  const char *ignore_elev_max_help; /**< @brief ignore range max help description.  */
  float scalez_arg;	/**< @brief z axis scaling.  */
  char * scalez_orig;	/**< @brief z axis scaling original value given at command line.  */
  const char *scalez_help; /**< @brief z axis scaling help description.  */
  int downscaling_arg;	/**< @brief dem raster downscaling.  */
  char * downscaling_orig;	/**< @brief dem raster downscaling original value given at command line.  */
  const char *downscaling_help; /**< @brief dem raster downscaling help description.  */
  int upscaling_arg;	/**< @brief dem raster interpolation factor.  */
  char * upscaling_orig;	/**< @brief dem raster interpolation factor original value given at command line.  */
  const char *upscaling_help; /**< @brief dem raster interpolation factor help description.  */
  int fullscreen_flag;	/**< @brief Fullscreen (default=off).  */
  const char *fullscreen_help; /**< @brief Fullscreen help description.  */
  int window_flag;	/**< @brief start windowed (default=off).  */
  const char *window_help; /**< @brief start windowed help description.  */
  int width_arg;	/**< @brief Window width.  */
  char * width_orig;	/**< @brief Window width original value given at command line.  */
  const char *width_help; /**< @brief Window width help description.  */
  int height_arg;	/**< @brief Window height.  */
  char * height_orig;	/**< @brief Window height original value given at command line.  */
  const char *height_help; /**< @brief Window height help description.  */
  float border_arg;	/**< @brief Border Lat and Lon.  */
  char * border_orig;	/**< @brief Border Lat and Lon original value given at command line.  */
  const char *border_help; /**< @brief Border Lat and Lon help description.  */
  float border_lat_arg;	/**< @brief Border Lat.  */
  char * border_lat_orig;	/**< @brief Border Lat original value given at command line.  */
  const char *border_lat_help; /**< @brief Border Lat help description.  */
  float border_lon_arg;	/**< @brief Border Lon.  */
  char * border_lon_orig;	/**< @brief Border Lon original value given at command line.  */
  const char *border_lon_help; /**< @brief Border Lon help description.  */
  int offset_arg;	/**< @brief height offset in m.  */
  char * offset_orig;	/**< @brief height offset in m original value given at command line.  */
  const char *offset_help; /**< @brief height offset in m help description.  */
  int airfield_elevation_arg;	/**< @brief Elevation of airfield (take-off) in m.  */
  char * airfield_elevation_orig;	/**< @brief Elevation of airfield (take-off) in m original value given at command line.  */
  const char *airfield_elevation_help; /**< @brief Elevation of airfield (take-off) in m help description.  */
  int marker_pos_arg;	/**< @brief Position of marker.  */
  char * marker_pos_orig;	/**< @brief Position of marker original value given at command line.  */
  const char *marker_pos_help; /**< @brief Position of marker help description.  */
  char * marker_time_arg;	/**< @brief Time of markerposition.  */
  char * marker_time_orig;	/**< @brief Time of markerposition original value given at command line.  */
  const char *marker_time_help; /**< @brief Time of markerposition help description.  */
  int marker_flag;	/**< @brief Marker (default=off).  */
  const char *marker_help; /**< @brief Marker help description.  */
  float marker_size_arg;	/**< @brief Size of the Marker.  */
  char * marker_size_orig;	/**< @brief Size of the Marker original value given at command line.  */
  const char *marker_size_help; /**< @brief Size of the Marker help description.  */
  int no_marker_flag;	/**< @brief no Marker (default=off).  */
  const char *no_marker_help; /**< @brief no Marker help description.  */
  int info_flag;	/**< @brief Info text display (default=off).  */
  const char *info_help; /**< @brief Info text display help description.  */
  int no_info_flag;	/**< @brief no info text display (default=off).  */
  const char *no_info_help; /**< @brief no info text display help description.  */
  char * text_arg;	/**< @brief Text string to display.  */
  char * text_orig;	/**< @brief Text string to display original value given at command line.  */
  const char *text_help; /**< @brief Text string to display help description.  */
  int no_position_info_flag;	/**< @brief Turn off viewpoint position info (default=off).  */
  const char *no_position_info_help; /**< @brief Turn off viewpoint position info help description.  */
  int no_marker_pos_info_flag;	/**< @brief Turn off marker position info (default=off).  */
  const char *no_marker_pos_info_help; /**< @brief Turn off marker position info help description.  */
  float text_size_arg;	/**< @brief Size of text for points/lifts (0.001-1.0).  */
  char * text_size_orig;	/**< @brief Size of text for points/lifts (0.001-1.0) original value given at command line.  */
  const char *text_size_help; /**< @brief Size of text for points/lifts (0.001-1.0) help description.  */
  float text_width_arg;	/**< @brief Width of text (1-20).  */
  char * text_width_orig;	/**< @brief Width of text (1-20) original value given at command line.  */
  const char *text_width_help; /**< @brief Width of text (1-20) help description.  */
  char * lifts_arg;	/**< @brief GPLIGC liftsfile.  */
  char * lifts_orig;	/**< @brief GPLIGC liftsfile original value given at command line.  */
  const char *lifts_help; /**< @brief GPLIGC liftsfile help description.  */
  int lifts_info_mode_arg;	/**< @brief which info to display (1-7).  */
  char * lifts_info_mode_orig;	/**< @brief which info to display (1-7) original value given at command line.  */
  const char *lifts_info_mode_help; /**< @brief which info to display (1-7) help description.  */
  char * waypoints_file_arg;	/**< @brief waypointsfile.  */
  char * waypoints_file_orig;	/**< @brief waypointsfile original value given at command line.  */
  const char *waypoints_file_help; /**< @brief waypointsfile help description.  */
  int waypoints_flag;	/**< @brief show waypoints (default=off).  */
  const char *waypoints_help; /**< @brief show waypoints help description.  */
  int no_waypoints_flag;	/**< @brief dont show waypoints (default=off).  */
  const char *no_waypoints_help; /**< @brief dont show waypoints help description.  */
  int waypoints_info_mode_arg;	/**< @brief which info to display (1-4).  */
  char * waypoints_info_mode_orig;	/**< @brief which info to display (1-4) original value given at command line.  */
  const char *waypoints_info_mode_help; /**< @brief which info to display (1-4) help description.  */
  int waypoints_offset_arg;	/**< @brief offset for displaying waypoint text in 3D.  */
  char * waypoints_offset_orig;	/**< @brief offset for displaying waypoint text in 3D original value given at command line.  */
  const char *waypoints_offset_help; /**< @brief offset for displaying waypoint text in 3D help description.  */
  int waypoints_offset_spheres_arg;	/**< @brief offset for displaying waypoint spheres and text in 3D.  */
  char * waypoints_offset_spheres_orig;	/**< @brief offset for displaying waypoint spheres and text in 3D original value given at command line.  */
  const char *waypoints_offset_spheres_help; /**< @brief offset for displaying waypoint spheres and text in 3D help description.  */
  int flighttrack_mode_arg;	/**< @brief sets the mode of track display.  */
  char * flighttrack_mode_orig;	/**< @brief sets the mode of track display original value given at command line.  */
  const char *flighttrack_mode_help; /**< @brief sets the mode of track display help description.  */
  int flighttrack_colormap_arg;	/**< @brief sets the colourmap for flighttrack.  */
  char * flighttrack_colormap_orig;	/**< @brief sets the colourmap for flighttrack original value given at command line.  */
  const char *flighttrack_colormap_help; /**< @brief sets the colourmap for flighttrack help description.  */
  float flighttrack_linewidth_arg;	/**< @brief sets the linewidth of the flighttrack.  */
  char * flighttrack_linewidth_orig;	/**< @brief sets the linewidth of the flighttrack original value given at command line.  */
  const char *flighttrack_linewidth_help; /**< @brief sets the linewidth of the flighttrack help description.  */
  int follow_flag;	/**< @brief viewpoint follows marker (default=off).  */
  const char *follow_help; /**< @brief viewpoint follows marker help description.  */
  int no_follow_flag;	/**< @brief viewpoint doesnt follow marker (default=off).  */
  const char *no_follow_help; /**< @brief viewpoint doesnt follow marker help description.  */
  int marker_range_flag;	/**< @brief range around marker is plottet (default=off).  */
  const char *marker_range_help; /**< @brief range around marker is plottet help description.  */
  int no_marker_range_flag;	/**< @brief full flight is displayed (default=off).  */
  const char *no_marker_range_help; /**< @brief full flight is displayed help description.  */
  int marker_ahead_arg;	/**< @brief define marker range.  */
  char * marker_ahead_orig;	/**< @brief define marker range original value given at command line.  */
  const char *marker_ahead_help; /**< @brief define marker range help description.  */
  int marker_back_arg;	/**< @brief define marker range.  */
  char * marker_back_orig;	/**< @brief define marker range original value given at command line.  */
  const char *marker_back_help; /**< @brief define marker range help description.  */
  int movie_flag;	/**< @brief start up in movie mode (default=off).  */
  const char *movie_help; /**< @brief start up in movie mode help description.  */
  int cycles_arg;	/**< @brief cycles for movie mode.  */
  char * cycles_orig;	/**< @brief cycles for movie mode original value given at command line.  */
  const char *cycles_help; /**< @brief cycles for movie mode help description.  */
  float spinning_arg;	/**< @brief spinning for movie mode.  */
  char * spinning_orig;	/**< @brief spinning for movie mode original value given at command line.  */
  const char *spinning_help; /**< @brief spinning for movie mode help description.  */
  int smooth_mouse_flag;	/**< @brief smooth movement (default=off).  */
  const char *smooth_mouse_help; /**< @brief smooth movement help description.  */
  int parent_pid_arg;	/**< @brief PID of parent.  */
  char * parent_pid_orig;	/**< @brief PID of parent original value given at command line.  */
  const char *parent_pid_help; /**< @brief PID of parent help description.  */
  int compression_flag;	/**< @brief Use texture map compression (default=off).  */
  const char *compression_help; /**< @brief Use texture map compression help description.  */
  int no_compression_flag;	/**< @brief Dont use texture map compression (default=off).  */
  const char *no_compression_help; /**< @brief Dont use texture map compression help description.  */
  int offscreen_flag;	/**< @brief Offscreen with GLX (default=off).  */
  const char *offscreen_help; /**< @brief Offscreen with GLX help description.  */
  int osmesa_flag;	/**< @brief Offscreen with Mesa (default=off).  */
  const char *osmesa_help; /**< @brief Offscreen with Mesa help description.  */
  char * os_outfile_arg;	/**< @brief outfile for offscreen rendering.  */
  char * os_outfile_orig;	/**< @brief outfile for offscreen rendering original value given at command line.  */
  const char *os_outfile_help; /**< @brief outfile for offscreen rendering help description.  */
  int jpeg_quality_arg;	/**< @brief Quality (0-100) of jpeg output.  */
  char * jpeg_quality_orig;	/**< @brief Quality (0-100) of jpeg output original value given at command line.  */
  const char *jpeg_quality_help; /**< @brief Quality (0-100) of jpeg output help description.  */
  char * image_format_arg;	/**< @brief Image format for screenshots.  */
  char * image_format_orig;	/**< @brief Image format for screenshots original value given at command line.  */
  const char *image_format_help; /**< @brief Image format for screenshots help description.  */
  char * save_path_arg;	/**< @brief Path to save screenshots.  */
  char * save_path_orig;	/**< @brief Path to save screenshots original value given at command line.  */
  const char *save_path_help; /**< @brief Path to save screenshots help description.  */
  char * basename_arg;	/**< @brief Basename of screenshots.  */
  char * basename_orig;	/**< @brief Basename of screenshots original value given at command line.  */
  const char *basename_help; /**< @brief Basename of screenshots help description.  */
  float clipping_far_arg;	/**< @brief clipping far.  */
  char * clipping_far_orig;	/**< @brief clipping far original value given at command line.  */
  const char *clipping_far_help; /**< @brief clipping far help description.  */
  float clipping_near_arg;	/**< @brief clipping near.  */
  char * clipping_near_orig;	/**< @brief clipping near original value given at command line.  */
  const char *clipping_near_help; /**< @brief clipping near help description.  */
  float init_lat_arg;	/**< @brief set initial latitude.  */
  char * init_lat_orig;	/**< @brief set initial latitude original value given at command line.  */
  const char *init_lat_help; /**< @brief set initial latitude help description.  */
  float init_lon_arg;	/**< @brief set initial longitude.  */
  char * init_lon_orig;	/**< @brief set initial longitude original value given at command line.  */
  const char *init_lon_help; /**< @brief set initial longitude help description.  */
  int init_alt_arg;	/**< @brief set initial altitude.  */
  char * init_alt_orig;	/**< @brief set initial altitude original value given at command line.  */
  const char *init_alt_help; /**< @brief set initial altitude help description.  */
  int init_heading_arg;	/**< @brief set initial heading.  */
  char * init_heading_orig;	/**< @brief set initial heading original value given at command line.  */
  const char *init_heading_help; /**< @brief set initial heading help description.  */
  int init_dive_arg;	/**< @brief set initial dive angle.  */
  char * init_dive_orig;	/**< @brief set initial dive angle original value given at command line.  */
  const char *init_dive_help; /**< @brief set initial dive angle help description.  */
  int init_pos_N_flag;	/**< @brief set position North (default=off).  */
  const char *init_pos_N_help; /**< @brief set position North help description.  */
  int init_pos_E_flag;	/**< @brief set position East (default=off).  */
  const char *init_pos_E_help; /**< @brief set position East help description.  */
  int init_pos_S_flag;	/**< @brief set position South (default=off).  */
  const char *init_pos_S_help; /**< @brief set position South help description.  */
  int init_pos_W_flag;	/**< @brief set position West (default=off).  */
  const char *init_pos_W_help; /**< @brief set position West help description.  */
  int init_pos_NE_flag;	/**< @brief set position NE (default=off).  */
  const char *init_pos_NE_help; /**< @brief set position NE help description.  */
  int init_pos_SE_flag;	/**< @brief set position SE (default=off).  */
  const char *init_pos_SE_help; /**< @brief set position SE help description.  */
  int init_pos_SW_flag;	/**< @brief set position SW (default=off).  */
  const char *init_pos_SW_help; /**< @brief set position SW help description.  */
  int init_pos_NW_flag;	/**< @brief set position NW (default=off).  */
  const char *init_pos_NW_help; /**< @brief set position NW help description.  */
  int init_pos_center_flag;	/**< @brief set position center (default=off).  */
  const char *init_pos_center_help; /**< @brief set position center help description.  */
  float init_ortho_lat_arg;	/**< @brief set initial latitude for ortho mode.  */
  char * init_ortho_lat_orig;	/**< @brief set initial latitude for ortho mode original value given at command line.  */
  const char *init_ortho_lat_help; /**< @brief set initial latitude for ortho mode help description.  */
  float init_ortho_lon_arg;	/**< @brief set initial longitude for ortho mode.  */
  char * init_ortho_lon_orig;	/**< @brief set initial longitude for ortho mode original value given at command line.  */
  const char *init_ortho_lon_help; /**< @brief set initial longitude for ortho mode help description.  */
  float init_ortho_width_arg;	/**< @brief set initial ortho-view width [km].  */
  char * init_ortho_width_orig;	/**< @brief set initial ortho-view width [km] original value given at command line.  */
  const char *init_ortho_width_help; /**< @brief set initial ortho-view width [km] help description.  */
  int projection_cyl_platt_flag;	/**< @brief set platt projection (default=off).  */
  const char *projection_cyl_platt_help; /**< @brief set platt projection help description.  */
  int projection_cyl_no1_flag;	/**< @brief set cylindric projection 1 (default=off).  */
  const char *projection_cyl_no1_help; /**< @brief set cylindric projection 1 help description.  */
  int projection_pseudo_cyl_no1_flag;	/**< @brief set pseudocylindric projection 1 (default=off).  */
  const char *projection_pseudo_cyl_no1_help; /**< @brief set pseudocylindric projection 1 help description.  */
  int projection_cyl_mercator_flag;	/**< @brief set mercator projection (default=off).  */
  const char *projection_cyl_mercator_help; /**< @brief set mercator projection help description.  */

  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int query_gl_given ;	/**< @brief Whether query-gl was given.  */
  unsigned int check_given ;	/**< @brief Whether check was given.  */
  unsigned int compiler_given ;	/**< @brief Whether compiler was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int igc_file_given ;	/**< @brief Whether igc-file was given.  */
  unsigned int gpsd_given ;	/**< @brief Whether gpsd was given.  */
  unsigned int gpsd_server_given ;	/**< @brief Whether gpsd-server was given.  */
  unsigned int gpsd_port_given ;	/**< @brief Whether gpsd-port was given.  */
  unsigned int gpsalt_given ;	/**< @brief Whether gpsalt was given.  */
  unsigned int baroalt_given ;	/**< @brief Whether baroalt was given.  */
  unsigned int use_all_fixes_given ;	/**< @brief Whether use-all-fixes was given.  */
  unsigned int lat_given ;	/**< @brief Whether lat was given.  */
  unsigned int lon_given ;	/**< @brief Whether lon was given.  */
  unsigned int get_elevation_given ;	/**< @brief Whether get-elevation was given.  */
  unsigned int config_file_given ;	/**< @brief Whether config-file was given.  */
  unsigned int ortho_given ;	/**< @brief Whether ortho was given.  */
  unsigned int perspective_given ;	/**< @brief Whether perspective was given.  */
  unsigned int aov_given ;	/**< @brief Whether aov was given.  */
  unsigned int landscape_given ;	/**< @brief Whether landscape was given.  */
  unsigned int flat_given ;	/**< @brief Whether flat was given.  */
  unsigned int map_given ;	/**< @brief Whether map was given.  */
  unsigned int no_map_given ;	/**< @brief Whether no-map was given.  */
  unsigned int map_set_name_given ;	/**< @brief Whether map-set-name was given.  */
  unsigned int modulate_given ;	/**< @brief Whether modulate was given.  */
  unsigned int no_modulate_given ;	/**< @brief Whether no-modulate was given.  */
  unsigned int maps_unlighted_given ;	/**< @brief Whether maps-unlighted was given.  */
  unsigned int maps_lighted_given ;	/**< @brief Whether maps-lighted was given.  */
  unsigned int no_lighting_given ;	/**< @brief Whether no-lighting was given.  */
  unsigned int terrain_shading_given ;	/**< @brief Whether terrain-shading was given.  */
  unsigned int shading_scale_given ;	/**< @brief Whether shading-scale was given.  */
  unsigned int light_direction_given ;	/**< @brief Whether light-direction was given.  */
  unsigned int airspace_given ;	/**< @brief Whether airspace was given.  */
  unsigned int airspace_wire_given ;	/**< @brief Whether airspace-wire was given.  */
  unsigned int airspace_wire_col_r_given ;	/**< @brief Whether airspace-wire-col-r was given.  */
  unsigned int airspace_wire_col_g_given ;	/**< @brief Whether airspace-wire-col-g was given.  */
  unsigned int airspace_wire_col_b_given ;	/**< @brief Whether airspace-wire-col-b was given.  */
  unsigned int airspace_wire_width_given ;	/**< @brief Whether airspace-wire-width was given.  */
  unsigned int airspace_transparent_given ;	/**< @brief Whether airspace-transparent was given.  */
  unsigned int no_airspace_given ;	/**< @brief Whether no-airspace was given.  */
  unsigned int airspace_file_given ;	/**< @brief Whether airspace-file was given.  */
  unsigned int airspace_limit_given ;	/**< @brief Whether airspace-limit was given.  */
  unsigned int wire_given ;	/**< @brief Whether wire was given.  */
  unsigned int filled_given ;	/**< @brief Whether filled was given.  */
  unsigned int grayscale_given ;	/**< @brief Whether grayscale was given.  */
  unsigned int color_given ;	/**< @brief Whether color was given.  */
  unsigned int stereo_given ;	/**< @brief Whether stereo was given.  */
  unsigned int no_stereo_given ;	/**< @brief Whether no-stereo was given.  */
  unsigned int stereo_rg_given ;	/**< @brief Whether stereo-rg was given.  */
  unsigned int no_stereo_rg_given ;	/**< @brief Whether no-stereo-rg was given.  */
  unsigned int stereo_rb_given ;	/**< @brief Whether stereo-rb was given.  */
  unsigned int no_stereo_rb_given ;	/**< @brief Whether no-stereo-rb was given.  */
  unsigned int stereo_hw_given ;	/**< @brief Whether stereo-hw was given.  */
  unsigned int no_stereo_hw_given ;	/**< @brief Whether no-stereo-hw was given.  */
  unsigned int inverse_stereo_given ;	/**< @brief Whether inverse-stereo was given.  */
  unsigned int no_inverse_stereo_given ;	/**< @brief Whether no-inverse-stereo was given.  */
  unsigned int eye_dist_given ;	/**< @brief Whether eye-dist was given.  */
  unsigned int flat_shading_given ;	/**< @brief Whether flat-shading was given.  */
  unsigned int gouraud_shading_given ;	/**< @brief Whether gouraud-shading was given.  */
  unsigned int quads_given ;	/**< @brief Whether quads was given.  */
  unsigned int curtain_given ;	/**< @brief Whether curtain was given.  */
  unsigned int no_curtain_given ;	/**< @brief Whether no-curtain was given.  */
  unsigned int haze_given ;	/**< @brief Whether haze was given.  */
  unsigned int no_haze_given ;	/**< @brief Whether no-haze was given.  */
  unsigned int haze_density_given ;	/**< @brief Whether haze-density was given.  */
  unsigned int colormap_given ;	/**< @brief Whether colormap was given.  */
  unsigned int colormap_sea_given ;	/**< @brief Whether colormap-sea was given.  */
  unsigned int colormap_min_given ;	/**< @brief Whether colormap-min was given.  */
  unsigned int colormap_max_given ;	/**< @brief Whether colormap-max was given.  */
  unsigned int sealevel_given ;	/**< @brief Whether sealevel was given.  */
  unsigned int sealevel2_given ;	/**< @brief Whether sealevel2 was given.  */
  unsigned int sealevel3_given ;	/**< @brief Whether sealevel3 was given.  */
  unsigned int ignore_elev_min_given ;	/**< @brief Whether ignore-elev-min was given.  */
  unsigned int ignore_elev_max_given ;	/**< @brief Whether ignore-elev-max was given.  */
  unsigned int scalez_given ;	/**< @brief Whether scalez was given.  */
  unsigned int downscaling_given ;	/**< @brief Whether downscaling was given.  */
  unsigned int upscaling_given ;	/**< @brief Whether upscaling was given.  */
  unsigned int fullscreen_given ;	/**< @brief Whether fullscreen was given.  */
  unsigned int window_given ;	/**< @brief Whether window was given.  */
  unsigned int width_given ;	/**< @brief Whether width was given.  */
  unsigned int height_given ;	/**< @brief Whether height was given.  */
  unsigned int border_given ;	/**< @brief Whether border was given.  */
  unsigned int border_lat_given ;	/**< @brief Whether border-lat was given.  */
  unsigned int border_lon_given ;	/**< @brief Whether border-lon was given.  */
  unsigned int offset_given ;	/**< @brief Whether offset was given.  */
  unsigned int airfield_elevation_given ;	/**< @brief Whether airfield-elevation was given.  */
  unsigned int marker_pos_given ;	/**< @brief Whether marker-pos was given.  */
  unsigned int marker_time_given ;	/**< @brief Whether marker-time was given.  */
  unsigned int marker_given ;	/**< @brief Whether marker was given.  */
  unsigned int marker_size_given ;	/**< @brief Whether marker-size was given.  */
  unsigned int no_marker_given ;	/**< @brief Whether no-marker was given.  */
  unsigned int info_given ;	/**< @brief Whether info was given.  */
  unsigned int no_info_given ;	/**< @brief Whether no-info was given.  */
  unsigned int text_given ;	/**< @brief Whether text was given.  */
  unsigned int no_position_info_given ;	/**< @brief Whether no-position-info was given.  */
  unsigned int no_marker_pos_info_given ;	/**< @brief Whether no-marker-pos-info was given.  */
  unsigned int text_size_given ;	/**< @brief Whether text-size was given.  */
  unsigned int text_width_given ;	/**< @brief Whether text-width was given.  */
  unsigned int lifts_given ;	/**< @brief Whether lifts was given.  */
  unsigned int lifts_info_mode_given ;	/**< @brief Whether lifts-info-mode was given.  */
  unsigned int waypoints_file_given ;	/**< @brief Whether waypoints-file was given.  */
  unsigned int waypoints_given ;	/**< @brief Whether waypoints was given.  */
  unsigned int no_waypoints_given ;	/**< @brief Whether no-waypoints was given.  */
  unsigned int waypoints_info_mode_given ;	/**< @brief Whether waypoints-info-mode was given.  */
  unsigned int waypoints_offset_given ;	/**< @brief Whether waypoints-offset was given.  */
  unsigned int waypoints_offset_spheres_given ;	/**< @brief Whether waypoints-offset-spheres was given.  */
  unsigned int flighttrack_mode_given ;	/**< @brief Whether flighttrack-mode was given.  */
  unsigned int flighttrack_colormap_given ;	/**< @brief Whether flighttrack-colormap was given.  */
  unsigned int flighttrack_linewidth_given ;	/**< @brief Whether flighttrack-linewidth was given.  */
  unsigned int follow_given ;	/**< @brief Whether follow was given.  */
  unsigned int no_follow_given ;	/**< @brief Whether no-follow was given.  */
  unsigned int marker_range_given ;	/**< @brief Whether marker-range was given.  */
  unsigned int no_marker_range_given ;	/**< @brief Whether no-marker-range was given.  */
  unsigned int marker_ahead_given ;	/**< @brief Whether marker-ahead was given.  */
  unsigned int marker_back_given ;	/**< @brief Whether marker-back was given.  */
  unsigned int movie_given ;	/**< @brief Whether movie was given.  */
  unsigned int cycles_given ;	/**< @brief Whether cycles was given.  */
  unsigned int spinning_given ;	/**< @brief Whether spinning was given.  */
  unsigned int smooth_mouse_given ;	/**< @brief Whether smooth-mouse was given.  */
  unsigned int parent_pid_given ;	/**< @brief Whether parent-pid was given.  */
  unsigned int compression_given ;	/**< @brief Whether compression was given.  */
  unsigned int no_compression_given ;	/**< @brief Whether no-compression was given.  */
  unsigned int offscreen_given ;	/**< @brief Whether offscreen was given.  */
  unsigned int osmesa_given ;	/**< @brief Whether osmesa was given.  */
  unsigned int os_outfile_given ;	/**< @brief Whether os-outfile was given.  */
  unsigned int jpeg_quality_given ;	/**< @brief Whether jpeg-quality was given.  */
  unsigned int image_format_given ;	/**< @brief Whether image-format was given.  */
  unsigned int save_path_given ;	/**< @brief Whether save-path was given.  */
  unsigned int basename_given ;	/**< @brief Whether basename was given.  */
  unsigned int clipping_far_given ;	/**< @brief Whether clipping-far was given.  */
  unsigned int clipping_near_given ;	/**< @brief Whether clipping-near was given.  */
  unsigned int init_lat_given ;	/**< @brief Whether init-lat was given.  */
  unsigned int init_lon_given ;	/**< @brief Whether init-lon was given.  */
  unsigned int init_alt_given ;	/**< @brief Whether init-alt was given.  */
  unsigned int init_heading_given ;	/**< @brief Whether init-heading was given.  */
  unsigned int init_dive_given ;	/**< @brief Whether init-dive was given.  */
  unsigned int init_pos_N_given ;	/**< @brief Whether init-pos-N was given.  */
  unsigned int init_pos_E_given ;	/**< @brief Whether init-pos-E was given.  */
  unsigned int init_pos_S_given ;	/**< @brief Whether init-pos-S was given.  */
  unsigned int init_pos_W_given ;	/**< @brief Whether init-pos-W was given.  */
  unsigned int init_pos_NE_given ;	/**< @brief Whether init-pos-NE was given.  */
  unsigned int init_pos_SE_given ;	/**< @brief Whether init-pos-SE was given.  */
  unsigned int init_pos_SW_given ;	/**< @brief Whether init-pos-SW was given.  */
  unsigned int init_pos_NW_given ;	/**< @brief Whether init-pos-NW was given.  */
  unsigned int init_pos_center_given ;	/**< @brief Whether init-pos-center was given.  */
  unsigned int init_ortho_lat_given ;	/**< @brief Whether init-ortho-lat was given.  */
  unsigned int init_ortho_lon_given ;	/**< @brief Whether init-ortho-lon was given.  */
  unsigned int init_ortho_width_given ;	/**< @brief Whether init-ortho-width was given.  */
  unsigned int projection_cyl_platt_given ;	/**< @brief Whether projection-cyl-platt was given.  */
  unsigned int projection_cyl_no1_given ;	/**< @brief Whether projection-cyl-no1 was given.  */
  unsigned int projection_pseudo_cyl_no1_given ;	/**< @brief Whether projection-pseudo-cyl-no1 was given.  */
  unsigned int projection_cyl_mercator_given ;	/**< @brief Whether projection-cyl-mercator was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
